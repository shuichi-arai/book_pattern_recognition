Let's Try! 3-1のサンプルプログラムです．
これらを利用してLet's Try! に解答してください．

    LetsTry3-1.LSM.py        ---- 最小二乗法で解く

    LetsTry3-1.SDM.py        ---- 最急降下法で解く

    LetsTry3-1.WidrowHoff.py ---- Widrow-Hoffで解く


-------------------------------------------
1. 最小二乗法   (LetsTry3-1.LSM.py)
-------------------------------------------
解析的に解きますので，解が表示されるだけです．
この解が解析的に求まれば良いのですが，与えるデータによっては求まらないことがあります．
以降の2つの数値解析手法では逐次的に解を求めていきますが，その値と比較してみましょう．

-------------------------------------------
2. 最急降下法   (LetsTry3-1.SDM.py)
-------------------------------------------
最急降下法では学習用データ全てを用いて1回の更新を行います．
例えば，プログラムを動かすと

[4500] J= 0.500  w =  [ 1.82237278 -3.63412319 -2.01045563]

のような出力が得られますが，4500回目の更新時の J と w の値を示しています．

-------------------------------------------
3. Widrow-Hoff  (LetsTry3-1.WidrowHoff.py)
-------------------------------------------
Widrow-Hoffの学習法では学習用データ(今回は20パターン)のうち1つのデータを用いて1回の更新を行います．
例えば，プログラムを動かすと

[4500] Jp = 0.031 0.722 0.584 0.075 0.127 0.058 0.131 0.639 0.601 0.122 1.177 1.868 0.635 0.059 0.657 0.094 0.628 0.047 0.047 0.616
    aveJp = 0.446 maxJp=1.86768 w = [ 2.78302519 -5.5423346  -2.95460222]

のような出力が得られますが，これは
・4500 [epoch] の時に (全データ20パターンを全て提示するのが1エポック)
・Jp の値はいくつで (パターンpごとに示してあります. ただし，パターンの提示順番は毎回異なります)
・Jpの平均値は aveJPで (最急降下法のJの値と比較できます)
・Jpの最大値は maxJPで
・更新されたwはいくつか
を示しています．

